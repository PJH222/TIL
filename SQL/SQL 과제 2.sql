SHOW DATABASES;
CREATE DATABASE analyze_db;

create table analyze_db.TB_POPLTN_DATA
(
    ADMINIST_ZONE             text   null,
    TOT_POPLTN_CO             bigint null,
    AGE_SCTN_POPLTN_CO        bigint null,
    POPLTN_CO_0_9             bigint null,
    POPLTN_CO_10_19           bigint null,
    POPLTN_CO_20_29           bigint null,
    POPLTN_CO_30_39           bigint null,
    POPLTN_CO_40_49           bigint null,
    POPLTN_CO_50_59           bigint null,
    POPLTN_CO_60_69           bigint null,
    POPLTN_CO_70_79           bigint null,
    POPLTN_CO_80_89           bigint null,
    POPLTN_CO_90_99           bigint null,
    POPLTN_CO_100             bigint null,
    MALE_TOT_POPLTN_CO        bigint null,
    MALE_AGE_SCTN_POPLTN_CO   bigint null,
    MALE_POPLTN_CO_0_9        bigint null,
    MALE_POPLTN_CO_10_19      bigint null,
    MALE_POPLTN_CO_20_29      bigint null,
    MALE_POPLTN_CO_30_39      bigint null,
    MALE_POPLTN_CO_40_49      bigint null,
    MALE_POPLTN_CO_50_59      bigint null,
    MALE_POPLTN_CO_60_69      bigint null,
    MALE_POPLTN_CO_70_79      bigint null,
    MALE_POPLTN_CO_80_89      bigint null,
    MALE_POPLTN_CO_90_99      bigint null,
    MALE_POPLTN_CO_100        bigint null,
    FEMALE_TOT_POPLTN_CO      bigint null,
    FEMALE_AGE_SCTN_POPLTN_CO bigint null,
    FEMALE_POPLTN_CO_0_9      bigint null,
    FEMALE_POPLTN_CO_10_19    bigint null,
    FEMALE_POPLTN_CO_20_29    bigint null,
    FEMALE_POPLTN_CO_30_39    bigint null,
    FEMALE_POPLTN_CO_40_49    bigint null,
    FEMALE_POPLTN_CO_50_59    bigint null,
    FEMALE_POPLTN_CO_60_69    bigint null,
    FEMALE_POPLTN_CO_70_79    bigint null,
    FEMALE_POPLTN_CO_80_89    bigint null,
    FEMALE_POPLTN_CO_90_99    bigint null,
    FEMALE_POPLTN_CO_100      bigint null
);

USE analyze_db;

create table analyze_db.TB_PBTRNSP_DATA
(
    DE                          text   null,
    HO_LN                       text   null,
    STATN_NO                    bigint null,
    STATN_NM                    text   null,
    FROM_04_HOUR_TO_05_HOUR_TK  bigint null,
    FROM_04_HOUR_TO_05_HOUR_GFF bigint null,
    FROM_05_HOUR_TO_06_HOUR_TK  bigint null,
    FROM_05_HOUR_TO_06_HOUR_GFF bigint null,
    FROM_06_HOUR_TO_07_HOUR_TK  bigint null,
    FROM_06_HOUR_TO_07_HOUR_GFF bigint null,
    FROM_07_HOUR_TO_08_HOUR_TK  bigint null,
    FROM_07_HOUR_TO_08_HOUR_GFF bigint null,
    FROM_08_HOUR_TO_09_HOUR_TK  bigint null,
    FROM_08_HOUR_TO_09_HOUR_GFF bigint null,
    FROM_09_HOUR_TO_10_HOUR_TK  bigint null,
    FROM_09_HOUR_TO_10_HOUR_GFF bigint null,
    FROM_10_HOUR_TO_11_HOUR_TK  bigint null,
    FROM_10_HOUR_TO_11_HOUR_GFF bigint null,
    FROM_11_HOUR_TO_12_HOUR_TK  bigint null,
    FROM_11_HOUR_TO_12_HOUR_GFF bigint null,
    FROM_12_HOUR_TO_13_HOUR_TK  bigint null,
    FROM_12_HOUR_TO_13_HOUR_GFF bigint null,
    FROM_13_HOUR_TO_14_HOUR_TK  bigint null,
    FROM_13_HOUR_TO_14_HOUR_GFF bigint null,
    FROM_14_HOUR_TO_15_HOUR_TK  bigint null,
    FROM_14_HOUR_TO_15_HOUR_GFF bigint null,
    FROM_15_HOUR_TO_16_HOUR_TK  bigint null,
    FROM_15_HOUR_TO_16_HOUR_GFF bigint null,
    FROM_16_HOUR_TO_17_HOUR_TK  bigint null,
    FROM_16_HOUR_TO_17_HOUR_GFF bigint null,
    FROM_17_HOUR_TO_18_HOUR_TK  bigint null,
    FROM_17_HOUR_TO_18_HOUR_GFF bigint null,
    FROM_18_HOUR_TO_19_HOUR_TK  bigint null,
    FROM_18_HOUR_TO_19_HOUR_GFF bigint null,
    FROM_19_HOUR_TO_20_HOUR_TK  bigint null,
    FROM_19_HOUR_TO_20_HOUR_GFF bigint null,
    FROM_20_HOUR_TO_21_HOUR_TK  bigint null,
    FROM_20_HOUR_TO_21_HOUR_GFF bigint null,
    FROM_21_HOUR_TO_22_HOUR_TK  bigint null,
    FROM_21_HOUR_TO_22_HOUR_GFF bigint null,
    FROM_22_HOUR_TO_23_HOUR_TK  bigint null,
    FROM_22_HOUR_TO_23_HOUR_GFF bigint null,
    FROM_23_HOUR_TO_24_HOUR_TK  bigint null,
    FROM_23_HOUR_TO_24_HOUR_GFF bigint null,
    FROM_24_HOUR_TO_01_HOUR_TK  bigint null,
    FROM_24_HOUR_TO_01_HOUR_GFF bigint null,
    FROM_01_HOUR_TO_02_HOUR_TK  bigint null,
    FROM_01_HOUR_TO_02_HOUR_GFF bigint null,
    FROM_02_HOUR_TO_03_HOUR_TK  bigint null,
    FROM_02_HOUR_TO_03_HOUR_GFF bigint null,
    FROM_03_HOUR_TO_04_HOUR_TK  bigint null,
    FROM_03_HOUR_TO_04_HOUR_GFF bigint null,
    WORK_DT                     text   null
);

create table analyze_db.TB_POPLTN
(
    ADMINIST_ZONE_NO varchar(10)  not null,
    ADMINIST_ZONE_NM varchar(150) null,
    STD_MT           varchar(6)   not null,
    POPLTN_SE_CD     varchar(1)   not null,
    AGRDE_SE_CD      varchar(3)   not null,
    POPLTN_CNT       int          null,
    primary key (ADMINIST_ZONE_NO, STD_MT, POPLTN_SE_CD, AGRDE_SE_CD)
);

INSERT INTO TB_POPLTN
SELECT A.ADMINIST_ZONE_NO, A.ADMINIST_ZONE_NM, A.STD_MT
     , CASE WHEN LVL1 = 1 THEN 'M' WHEN LVL1 = 2 THEN 'F' WHEN LVL1 = 3 THEN 'T' END AS POPLTN_SE_CD
     , CASE WHEN LVL2 = 1  THEN '000' WHEN LVL2 = 2  THEN '010' WHEN LVL2 = 3  THEN '020'
            WHEN LVL2 = 4  THEN '030' WHEN LVL2 = 5  THEN '040' WHEN LVL2 = 6  THEN '050'
            WHEN LVL2 = 7  THEN '060' WHEN LVL2 = 8  THEN '070' WHEN LVL2 = 9  THEN '080'
            WHEN LVL2 = 10 THEN '090' WHEN LVL2 = 11 THEN '100'
       END AS AGRDE_SE_CD
     , CASE WHEN LVL1 = 1 AND LVL2 = 1  THEN MALE_POPLTN_CO_0_9     WHEN LVL1 = 1 AND LVL2 = 2  THEN MALE_POPLTN_CO_10_19
            WHEN LVL1 = 1 AND LVL2 = 3  THEN MALE_POPLTN_CO_20_29   WHEN LVL1 = 1 AND LVL2 = 4  THEN MALE_POPLTN_CO_30_39
            WHEN LVL1 = 1 AND LVL2 = 5  THEN MALE_POPLTN_CO_40_49   WHEN LVL1 = 1 AND LVL2 = 6  THEN MALE_POPLTN_CO_50_59
            WHEN LVL1 = 1 AND LVL2 = 7  THEN MALE_POPLTN_CO_60_69   WHEN LVL1 = 1 AND LVL2 = 8  THEN MALE_POPLTN_CO_70_79
            WHEN LVL1 = 1 AND LVL2 = 9  THEN MALE_POPLTN_CO_80_89   WHEN LVL1 = 1 AND LVL2 = 10 THEN MALE_POPLTN_CO_90_99
            WHEN LVL1 = 1 AND LVL2 = 11 THEN MALE_POPLTN_CO_100     WHEN LVL1 = 2 AND LVL2 = 1  THEN FEMALE_POPLTN_CO_0_9
            WHEN LVL1 = 2 AND LVL2 = 2  THEN FEMALE_POPLTN_CO_10_19 WHEN LVL1 = 2 AND LVL2 = 3  THEN FEMALE_POPLTN_CO_20_29
            WHEN LVL1 = 2 AND LVL2 = 4  THEN FEMALE_POPLTN_CO_30_39 WHEN LVL1 = 2 AND LVL2 = 5  THEN FEMALE_POPLTN_CO_40_49
            WHEN LVL1 = 2 AND LVL2 = 6  THEN FEMALE_POPLTN_CO_50_59 WHEN LVL1 = 2 AND LVL2 = 7  THEN FEMALE_POPLTN_CO_60_69
            WHEN LVL1 = 2 AND LVL2 = 8  THEN FEMALE_POPLTN_CO_70_79 WHEN LVL1 = 2 AND LVL2 = 9  THEN FEMALE_POPLTN_CO_80_89
            WHEN LVL1 = 2 AND LVL2 = 10 THEN FEMALE_POPLTN_CO_90_99 WHEN LVL1 = 2 AND LVL2 = 11 THEN FEMALE_POPLTN_CO_100
            WHEN LVL1 = 3 AND LVL2 = 1  THEN POPLTN_CO_0_9          WHEN LVL1 = 3 AND LVL2 = 2  THEN POPLTN_CO_10_19
            WHEN LVL1 = 3 AND LVL2 = 3  THEN POPLTN_CO_20_29        WHEN LVL1 = 3 AND LVL2 = 4  THEN POPLTN_CO_30_39
            WHEN LVL1 = 3 AND LVL2 = 5  THEN POPLTN_CO_40_49        WHEN LVL1 = 3 AND LVL2 = 6  THEN POPLTN_CO_50_59
            WHEN LVL1 = 3 AND LVL2 = 7  THEN POPLTN_CO_60_69        WHEN LVL1 = 3 AND LVL2 = 8  THEN POPLTN_CO_70_79
            WHEN LVL1 = 3 AND LVL2 = 9  THEN POPLTN_CO_80_89        WHEN LVL1 = 3 AND LVL2 = 10 THEN POPLTN_CO_90_99
            WHEN LVL1 = 3 AND LVL2 = 11 THEN POPLTN_CO_100 END AS POPLTN_CNT
  FROM
     (
      SELECT SUBSTR(ADMINIST_ZONE, INSTR(ADMINIST_ZONE, '(') + 1, 10) AS ADMINIST_ZONE_NO
           , SUBSTR(ADMINIST_ZONE, 1, INSTR(ADMINIST_ZONE, '(')-1) AS ADMINIST_ZONE_NM,
             '202304' AS STD_MT
           , MALE_POPLTN_CO_0_9    , MALE_POPLTN_CO_10_19  , MALE_POPLTN_CO_20_29
           , MALE_POPLTN_CO_30_39  , MALE_POPLTN_CO_40_49  , MALE_POPLTN_CO_50_59
           , MALE_POPLTN_CO_60_69  , MALE_POPLTN_CO_70_79  , MALE_POPLTN_CO_80_89  , MALE_POPLTN_CO_90_99  , MALE_POPLTN_CO_100
           , FEMALE_POPLTN_CO_0_9  , FEMALE_POPLTN_CO_10_19, FEMALE_POPLTN_CO_20_29
           , FEMALE_POPLTN_CO_30_39, FEMALE_POPLTN_CO_40_49, FEMALE_POPLTN_CO_50_59
           , FEMALE_POPLTN_CO_60_69, FEMALE_POPLTN_CO_70_79, FEMALE_POPLTN_CO_80_89, FEMALE_POPLTN_CO_90_99, FEMALE_POPLTN_CO_100
           , POPLTN_CO_0_9         , POPLTN_CO_10_19, POPLTN_CO_20_29
           , POPLTN_CO_30_39       , POPLTN_CO_40_49, POPLTN_CO_50_59
           , POPLTN_CO_60_69       , POPLTN_CO_70_79, POPLTN_CO_80_89, POPLTN_CO_90_99, POPLTN_CO_100
           , LVL1, LVL2
        FROM TB_POPLTN_DATA,
             (SELECT (tmp1.idx) AS LVL1 FROM (SELECT 1 as idx UNION SELECT 2 UNION SELECT 3) tmp1) LVL1,
             (SELECT (tmp2.idx) AS LVL2 FROM (SELECT 1 as idx UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11) tmp2) LVL2
     ) A ;
     
     create table analyze_db.TB_PBTRNSP
(
    STATN_NO        int         not null,
    STATN_NM        varchar(50) null,
    HO_LN           varchar(50) null,
    STD_MT          char(6)     not null,
    BEGIN_TIME      char(4)     not null,
    END_TIME        char(4)     not null,
    TKCAR_GFF_SE_CD char(2)     not null,
    NMPR_CNT        bigint      null,
    primary key (STATN_NO, STD_MT, BEGIN_TIME, END_TIME, TKCAR_GFF_SE_CD)
);

INSERT INTO TB_PBTRNSP (STATN_NO, STATN_NM, HO_LN, STD_MT, BEGIN_TIME, END_TIME, TKCAR_GFF_SE_CD, NMPR_CNT)
SELECT A.STATN_NO, A.STATN_NM, A.HO_LN, '202304' AS STD_MT
     , CASE WHEN A.LVL BETWEEN 1 AND 2 THEN '0400' WHEN A.LVL BETWEEN 3 AND 4 THEN '0500' WHEN A.LVL BETWEEN 5 AND 6 THEN '0600' WHEN A.LVL BETWEEN 7 AND 8 THEN '0700'
            WHEN A.LVL BETWEEN 9 AND 10 THEN '0800' WHEN A.LVL BETWEEN 11 AND 12 THEN '0900' WHEN A.LVL BETWEEN 13 AND 14 THEN '1000' WHEN A.LVL BETWEEN 15 AND 16 THEN '1100'
            WHEN A.LVL BETWEEN 17 AND 18 THEN '1200' WHEN A.LVL BETWEEN 19 AND 20 THEN '1300' WHEN A.LVL BETWEEN 21 AND 22 THEN '1400' WHEN A.LVL BETWEEN 23 AND 24 THEN '1500'
            WHEN A.LVL BETWEEN 25 AND 26 THEN '1600' WHEN A.LVL BETWEEN 27 AND 28 THEN '1700' WHEN A.LVL BETWEEN 29 AND 30 THEN '1800' WHEN A.LVL BETWEEN 31 AND 32 THEN '1900'
            WHEN A.LVL BETWEEN 33 AND 34 THEN '2000' WHEN A.LVL BETWEEN 35 AND 36 THEN '2100' WHEN A.LVL BETWEEN 37 AND 38 THEN '2200' WHEN A.LVL BETWEEN 39 AND 40 THEN '2300'
            WHEN A.LVL BETWEEN 41 AND 42 THEN '2400' WHEN A.LVL BETWEEN 43 AND 44 THEN '0100' WHEN A.LVL BETWEEN 45 AND 46 THEN '0200' WHEN A.LVL BETWEEN 47 AND 48 THEN '0300'
            ELSE '' END AS BEGIN_TIME
     , CASE WHEN A.LVL BETWEEN 1 AND 2 THEN '0500' WHEN A.LVL BETWEEN 3 AND 4 THEN '0600' WHEN A.LVL BETWEEN 5 AND 6 THEN '0700' WHEN A.LVL BETWEEN 7 AND 8 THEN '0800'
            WHEN A.LVL BETWEEN 9 AND 10 THEN '0900' WHEN A.LVL BETWEEN 11 AND 12 THEN '1000' WHEN A.LVL BETWEEN 13 AND 14 THEN '1100' WHEN A.LVL BETWEEN 15 AND 16 THEN '1200'
            WHEN A.LVL BETWEEN 17 AND 18 THEN '1300' WHEN A.LVL BETWEEN 19 AND 20 THEN '1400' WHEN A.LVL BETWEEN 21 AND 22 THEN '1500' WHEN A.LVL BETWEEN 23 AND 24 THEN '1600'
            WHEN A.LVL BETWEEN 25 AND 26 THEN '1700' WHEN A.LVL BETWEEN 27 AND 28 THEN '1800' WHEN A.LVL BETWEEN 29 AND 30 THEN '1900' WHEN A.LVL BETWEEN 31 AND 32 THEN '2000'
            WHEN A.LVL BETWEEN 33 AND 34 THEN '2100' WHEN A.LVL BETWEEN 35 AND 36 THEN '2200' WHEN A.LVL BETWEEN 37 AND 38 THEN '2300' WHEN A.LVL BETWEEN 39 AND 40 THEN '2400'
            WHEN A.LVL BETWEEN 41 AND 42 THEN '0100' WHEN A.LVL BETWEEN 43 AND 44 THEN '0200' WHEN A.LVL BETWEEN 45 AND 46 THEN '0300' WHEN A.LVL BETWEEN 47 AND 48 THEN '0400'
            ELSE '' END AS END_TIME
     , CASE WHEN MOD(A.LVL, 2) = 1 THEN 'TK'
            WHEN MOD(A.LVL, 2) = 0 THEN 'GF'
            ELSE '' END AS TKCAR_GFF_SE_CD
       , CASE WHEN A.LVL = 1  THEN FROM_04_HOUR_TO_05_HOUR_TK WHEN A.LVL = 2  THEN FROM_04_HOUR_TO_05_HOUR_GFF
            WHEN A.LVL = 3  THEN FROM_05_HOUR_TO_06_HOUR_TK WHEN A.LVL = 4  THEN FROM_05_HOUR_TO_06_HOUR_GFF
            WHEN A.LVL = 5  THEN FROM_06_HOUR_TO_07_HOUR_TK WHEN A.LVL = 6  THEN FROM_06_HOUR_TO_07_HOUR_GFF
            WHEN A.LVL = 7  THEN FROM_07_HOUR_TO_08_HOUR_TK WHEN A.LVL = 8  THEN FROM_07_HOUR_TO_08_HOUR_GFF
            WHEN A.LVL = 9  THEN FROM_08_HOUR_TO_09_HOUR_TK WHEN A.LVL = 10 THEN FROM_08_HOUR_TO_09_HOUR_GFF
            WHEN A.LVL = 11 THEN FROM_09_HOUR_TO_10_HOUR_TK WHEN A.LVL = 12 THEN FROM_09_HOUR_TO_10_HOUR_GFF
            WHEN A.LVL = 13 THEN FROM_10_HOUR_TO_11_HOUR_TK WHEN A.LVL = 14 THEN FROM_10_HOUR_TO_11_HOUR_GFF
            WHEN A.LVL = 15 THEN FROM_11_HOUR_TO_12_HOUR_TK WHEN A.LVL = 16 THEN FROM_11_HOUR_TO_12_HOUR_GFF
            WHEN A.LVL = 17 THEN FROM_12_HOUR_TO_13_HOUR_TK WHEN A.LVL = 18 THEN FROM_12_HOUR_TO_13_HOUR_GFF
            WHEN A.LVL = 19 THEN FROM_13_HOUR_TO_14_HOUR_TK WHEN A.LVL = 20 THEN FROM_13_HOUR_TO_14_HOUR_GFF
            WHEN A.LVL = 21 THEN FROM_14_HOUR_TO_15_HOUR_TK WHEN A.LVL = 22 THEN FROM_14_HOUR_TO_15_HOUR_GFF
            WHEN A.LVL = 23 THEN FROM_15_HOUR_TO_16_HOUR_TK WHEN A.LVL = 24 THEN FROM_15_HOUR_TO_16_HOUR_GFF
            WHEN A.LVL = 25 THEN FROM_16_HOUR_TO_17_HOUR_TK WHEN A.LVL = 26 THEN FROM_16_HOUR_TO_17_HOUR_GFF
            WHEN A.LVL = 27 THEN FROM_17_HOUR_TO_18_HOUR_TK WHEN A.LVL = 28 THEN FROM_17_HOUR_TO_18_HOUR_GFF
            WHEN A.LVL = 29 THEN FROM_18_HOUR_TO_19_HOUR_TK WHEN A.LVL = 30 THEN FROM_18_HOUR_TO_19_HOUR_GFF
            WHEN A.LVL = 31 THEN FROM_19_HOUR_TO_20_HOUR_TK WHEN A.LVL = 32 THEN FROM_19_HOUR_TO_20_HOUR_GFF
            WHEN A.LVL = 33 THEN FROM_20_HOUR_TO_21_HOUR_TK WHEN A.LVL = 34 THEN FROM_20_HOUR_TO_21_HOUR_GFF
            WHEN A.LVL = 35 THEN FROM_21_HOUR_TO_22_HOUR_TK WHEN A.LVL = 36 THEN FROM_21_HOUR_TO_22_HOUR_GFF
            WHEN A.LVL = 37 THEN FROM_22_HOUR_TO_23_HOUR_TK WHEN A.LVL = 38 THEN FROM_22_HOUR_TO_23_HOUR_GFF
            WHEN A.LVL = 39 THEN FROM_23_HOUR_TO_24_HOUR_TK WHEN A.LVL = 40 THEN FROM_23_HOUR_TO_24_HOUR_GFF
            WHEN A.LVL = 41 THEN FROM_24_HOUR_TO_01_HOUR_TK WHEN A.LVL = 42 THEN FROM_24_HOUR_TO_01_HOUR_GFF
            WHEN A.LVL = 43 THEN FROM_01_HOUR_TO_02_HOUR_TK WHEN A.LVL = 44 THEN FROM_01_HOUR_TO_02_HOUR_GFF
            WHEN A.LVL = 45 THEN FROM_02_HOUR_TO_03_HOUR_TK WHEN A.LVL = 46 THEN FROM_02_HOUR_TO_03_HOUR_GFF
            WHEN A.LVL = 47 THEN FROM_03_HOUR_TO_04_HOUR_TK WHEN A.LVL = 48 THEN FROM_03_HOUR_TO_04_HOUR_GFF
            ELSE 0 END AS NMPR_CNT
  FROM (
          SELECT A.*, B.LVL
            FROM TB_PBTRNSP_DATA A
            JOIN (SELECT 1 AS LVL UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6
                  UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12
                  UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18
                  UNION SELECT 19 UNION SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24
                  UNION SELECT 25 UNION SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION SELECT 30
                  UNION SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION SELECT 36
                  UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION SELECT 40 UNION SELECT 41 UNION SELECT 42
                  UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION SELECT 46 UNION SELECT 47 UNION SELECT 48
                 ) B
     ) A
ORDER BY CAST(STATN_NO AS UNSIGNED), BEGIN_TIME, END_TIME;

-- 이제 다시 제대로 나오는 것 확인함
SELECT * FROM TB_POPLTN_DATA;
SELECT * FROM TB_PBTRNSP_DATA;
SELECT * FROM TB_PBTRNSP;
SELECT * FROM TB_POPLTN;

-- TKCAR_GFF_SE_CD 칼럼명, GF 타는거, TK 내리는 거

-- 1번 
-- 가장 많은 역 : 잠실(송파구청)
-- 가장 적은 역 : 삼산체육관


SELECT STATN_NM, SUM(NMPR_CNT)
FROM TB_PBTRNSP
Group by STATN_NM;
    
-- 2번
-- 하차인원수가 가장 많은 순으로 데이터 조회

SELECT *
FROM TB_PBTRNSP
WHERE TKCAR_GFF_SE_CD = 'TK'
ORDER BY NMPR_CNT DESC;

SELECT *
FROM TB_PBTRNSP
WHERE TKCAR_GFF_SE_CD = 'GF'
ORDER BY NMPR_CNT DESC;

-- 3번
-- 전체 인구의 연령대별 비율 
SELECT AGRDE_SE_CD, CONCAT(ROUND(SUM(POPLTN_CNT) * 100/(SELECT SUM(POPLTN_CNT)  FROM TB_POPLTN),2), "%") AS PROPORTION
FROM TB_POPLTN
Group by AGRDE_SE_CD;

-- 4번
-- 2023년 4월 기준 전국 주요 시/도의 연령대별 인구수 합계를 구하고 인구 비율 구하기
SELECT *
FROM TB_POPLTN_DATA
WHERE ADMINIST_ZONE NOT LIKE "%군%" 
	AND ADMINIST_ZONE NOT LIKE "%구%" 
	AND ADMINIST_ZONE NOT LIKE "%동%" 
    AND ADMINIST_ZONE NOT LIKE "%읍%" 
    AND ADMINIST_ZONE NOT LIKE "%면%";
    -- AND ADMINIST_ZONE LIKE "%도";
    
-- 숫자만 추출하기
SELECT SUBSTR('서울특별시 송파구 가락1동(1171063100)', INSTR('서울특별시 송파구 가락1동(1171063100)', '(')+1, 10) as test;
    
-- 연령대별 인구수 구하기
SELECT AGRDE_SE_CD,
	SUM(POPLTN_CNT) AS AGRDE_POPLTN_CNT
FROM TB_POPLTN
WHERE STD_MT = '202304'
	AND ADMINIST_ZONE_NO LIKE "__00000000"
	AND POPLTN_SE_CD = 'T'
GROUP BY AGRDE_SE_CD;
-- 틀리면 오타 없는지 확인해라...


-- 연령대별 인구 비율 구하기
SELECT
	A.AGRDE_SE_CD,
	A.AGRDE_POPLTN_CNT,
	SUM(A.AGRDE_POPLTN_CNT) OVER() AS SUM_AGRDE_POPLTN_CNT -- OVER붙이면 알아서 하나씩 들어가는건가...
    ,CONCAT(A.AGRDE_POPLTN_CNT * 100 / SUM(A.AGRDE_POPLTN_CNT) OVER(), "%") AS POPLTN_RATE
    
FROM (
	SELECT AGRDE_SE_CD,
		SUM(POPLTN_CNT) AS AGRDE_POPLTN_CNT
	FROM TB_POPLTN
	WHERE STD_MT = '202304'
		AND ADMINIST_ZONE_NO LIKE "__00000000"
		AND POPLTN_SE_CD = 'T'
	GROUP BY AGRDE_SE_CD ) AS A;

-- 서브쿼리 대신에 WITH ~ AS 구문 사용하기 (보기 더 편해진다~~)
-- WITH ~ AS 구문 : 서브쿼리에서 조회할 결과를 미리 임시 테이블 형식으로 만들어 놓는 방법
-- 임시 테이블이기 때문에 1회성이다, 한번 사용되면 사라진다. VIEW와는 다르다...

-- WITH [임시테이블 이름] AS (변수로 저장하고 싶은 테이블)
WITH TEMP_AGRDE_POPLTN_CNT AS (
	SELECT AGRDE_SE_CD,
		SUM(POPLTN_CNT) AS AGRDE_POPLTN_CNT
	FROM TB_POPLTN
	WHERE STD_MT = '202304'
		AND ADMINIST_ZONE_NO LIKE "__00000000"
		AND POPLTN_SE_CD = 'T'
	GROUP BY AGRDE_SE_CD
)
SELECT
	A.AGRDE_SE_CD,
	A.AGRDE_POPLTN_CNT,
	SUM(A.AGRDE_POPLTN_CNT) OVER() AS SUM_AGRDE_POPLTN_CNT -- OVER붙이면 알아서 하나씩 들어가는건가...
    ,CONCAT(A.AGRDE_POPLTN_CNT * 100 / SUM(A.AGRDE_POPLTN_CNT) OVER(), "%") AS POPLTN_RATE
FROM TEMP_AGRDE_POPLTN_CNT AS A; -- 짜증나게 AS 안하면 실행이 안된다...ㅠㅠ

SELECT * FROM TB_PBTRNSP;
SELECT * FROM TB_POPLTN;

-- (내가 풀이한 내용)전국의 주요 시/도의 성별 인구수 합계 구하기.
SELECT ADMINIST_ZONE_NM, SUM(POPLTN_CNT)
FROM TB_POPLTN
WHERE STD_MT = '202304'
		AND ADMINIST_ZONE_NO LIKE "__00000000"
		AND POPLTN_SE_CD != 'T'
GROUP BY ADMINIST_ZONE_NM; -- POPLTN_SE_CD 로 바꾸면 바뀜

SELECT 
	POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS SE_POPLTN_CNT
FROM TB_POPLTN
WHERE STD_MT = '202304'
	AND ADMINIST_ZONE_NO LIKE "__00000000"
	AND POPLTN_SE_CD != 'T'
GROUP BY POPLTN_SE_CD;


-- 2023년 04월 기준 전국의 성별 인구수 합계를 구하여 남성/여성 비율을 구하기 -> 피봇테이블을 사용해보자
SELECT 
	POPLTN_SE_CD,
    CASE WHEN POPLTN_SE_CD ='M' THEN SUM(POPLTN_CNT) ELSE 0 END AS MALE_POPLTN_CNT,
    CASE WHEN POPLTN_SE_CD ='F' THEN SUM(POPLTN_CNT) ELSE 0 END AS FEMALE_POPLTN_CNT
FROM TB_POPLTN
WHERE STD_MT = '202304'
	AND ADMINIST_ZONE_NO LIKE "__00000000"
	AND POPLTN_SE_CD != 'T'
GROUP BY POPLTN_SE_CD;

-- WITH AS 로 다시 정리하기


WITH TEMP_SE_POPLTN_CNT AS(
SELECT 
	POPLTN_SE_CD,
    CASE WHEN POPLTN_SE_CD ='M' THEN SUM(POPLTN_CNT) ELSE 0 END AS MALE_POPLTN_CNT,
    CASE WHEN POPLTN_SE_CD ='F' THEN SUM(POPLTN_CNT) ELSE 0 END AS FEMALE_POPLTN_CNT
FROM TB_POPLTN
WHERE STD_MT = '202304'
	AND ADMINIST_ZONE_NO LIKE "__00000000"
	AND POPLTN_SE_CD != 'T'
GROUP BY POPLTN_SE_CD
), TEMP_PIVOT_POPLTN_CNT AS(SELECT 
	MAX(MALE_POPLTN_CNT) AS MALE_POPLTN_CNT,
    MAX(FEMALE_POPLTN_CNT) AS FEMALE_POPLTN_CNT
FROM TEMP_SE_POPLTN_CNT A)
SELECT
	MALE_POPLTN_CNT,
    FEMALE_POPLTN_CNT,
    MALE_POPLTN_CNT / FEMALE_POPLTN_CNT AS "남성/여성 비율",
    MALE_POPLTN_CNT / (MALE_POPLTN_CNT + FEMALE_POPLTN_CNT) AS "전체 인구수 대비 남성비율",
    FEMALE_POPLTN_CNT / (MALE_POPLTN_CNT + FEMALE_POPLTN_CNT) AS "전체 인구수 대비 여성비율"
FROM TEMP_PIVOT_POPLTN_CNT;

-- 4월기준 전국의 읍면동의 인구수를 조회
-- __ 2개 시 ___ 3개 군구 _____ 5개 읍면동 << 

SELECT * FROM TB_PBTRNSP;
SELECT * FROM TB_POPLTN;

SELECT 
	AGRDE_SE_CD,
    ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
    POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE "_____00000"
	AND POPLTN_SE_CD = 'T'
    AND STD_MT = '202304'
    AND POPLTN_CNT > 0
ORDER BY POPLTN_CNT DESC;

-- 피봇을 언제쓰면 좋을지 고민해보라... ( 사실 별 쓸모 없어 보이긴한데 ㅎㅎ,,,,)


-- 4월기준 전국의 읍면동의 인구수를 조회한 후, 연령대별 인구가 가장 많은 지역을 조회
-- 내가 푼 방법
SELECT 
	AGRDE_SE_CD,
    ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
    POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE "_____00000"
	AND POPLTN_SE_CD = 'T'
    AND STD_MT = '202304'
    AND POPLTN_CNT > 0;
-- GROUP BY AGRDE_SE_CD;

WITH TMP AS(
	SELECT 
		AGRDE_SE_CD,
		ADMINIST_ZONE_NO,
		ADMINIST_ZONE_NM,
		POPLTN_CNT
	FROM TB_POPLTN
	WHERE ADMINIST_ZONE_NO NOT LIKE "_____00000"
		AND POPLTN_SE_CD = 'T'
		AND STD_MT = '202304'
		AND POPLTN_CNT > 0
	ORDER BY POPLTN_CNT DESC) , TEMP_AGRDE_POPLTN_RANK AS (
	SELECT 
		AGRDE_SE_CD,
		ADMINIST_ZONE_NO,
		ADMINIST_ZONE_NM,
		POPLTN_CNT,
		RANK() OVER(PARTITION BY AGRDE_SE_CD ORDER BY POPLTN_CNT DESC) AS POPLTN_RANK
	FROM TMP)
SELECT
	* 
FROM 
	TEMP_AGRDE_POPLTN_RANK
WHERE POPLTN_RANK = 1
ORDER BY AGRDE_SE_CD;


-- 연령대별 인구 비율이 가장 높은 동네를 조회하라

WITH TMP1 AS (SELECT
	AGRDE_SE_CD,
    ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
    POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE '_____00000'
	AND POPLTN_SE_CD = 'T'
ORDER BY POPLTN_CNT DESC), TMP2 AS(
SELECT 
	AGRDE_SE_CD,
    ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
    POPLTN_CNT,
    POPLTN_CNT * 100 / SUM(POPLTN_CNT) OVER(PARTITION BY ADMINIST_ZONE_NO) AS "지역별연령대별비율",
    SUM(POPLTN_CNT) OVER(PARTITION BY AGRDE_SE_CD)
FROM TMP1), TMP3 AS (
SELECT
	AGRDE_SE_CD,
    ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
    POPLTN_CNT,
    지역별연령대별비율,
    RANK() OVER (PARTITION BY AGRDE_SE_CD ORDER BY 지역별연령대별비율 DESC) AS RANKK
FROM TMP2)
SELECT * 
FROM TMP3
WHERE RANKK = 1
ORDER BY AGRDE_SE_CD;

-- 전국의 각 읍면동 기준 남성의 수보다 여성의 수가 많은 지역 기준 내림차순

-- 1. 기반 데이터 조회
SELECT
	ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
	POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE '_____00000'
	AND POPLTN_SE_CD IN ('M', 'F')
    AND STD_MT = '202304'
GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM, POPLTN_SE_CD;

# 2. WITH AS 구문을 이용해 PIVOT 수행
-- 남성 인구수, 여성 인구수 컬럼 생성
-- SELECT절에서 계산을 하려면 컬럼 형태로 정리하는게 좋다
-- 코드화 된 것을 컬럼화 하는 것이 피폿이다. 반대의 경우는 멜팅이다.
-- 추후에 복습할 때, WITH AS를 하나씩 벗겨가면서 어떤 결과물이 나오는지 확인하자.
WITH TMP AS(
SELECT
	ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
	POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE '_____00000'
	AND POPLTN_SE_CD IN ('M', 'F')
    AND STD_MT = '202304'
GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM, POPLTN_SE_CD
), TMP2 AS (
	SELECT 
		ADMINIST_ZONE_NO,
		ADMINIST_ZONE_NM,
		IF(POPLTN_SE_CD = 'M', POPLTN_CNT, 0) AS MALE_POPLTN_CNT,
		IF(POPLTN_SE_CD = 'F', POPLTN_CNT, 0) AS FEMALE_POPLTN_CNT
	FROM TMP
)
-- REDUCING이 한번에 안되므로 여기서 WITH ~ AS를 한번 더 써준다!
, TMP3 AS (
	SELECT 
		ADMINIST_ZONE_NO, ADMINIST_ZONE_NM,
		MAX(MALE_POPLTN_CNT) AS MALE_POPLTN_CNT,
		MAX(FEMALE_POPLTN_CNT) AS FEMALE_POPLTN_CNT
	FROM TMP2
	GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM
)
SELECT ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    FEMALE_POPLTN_CNT,
    MALE_POPLTN_CNT,
    FEMALE_POPLTN_CNT - MALE_POPLTN_CNT AS FEMALE_MALE_DIFF
FROM TMP3
ORDER BY FEMALE_MALE_DIFF DESC
LIMIT 10;

-- 숙제 해보기
-- 1. 남성/여성 비율이 가장 높은 지역과 가장 낮은 지역 구하기

WITH TMP AS(
SELECT
	ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
	POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE '_____00000'
	AND POPLTN_SE_CD IN ('M', 'F')
    AND STD_MT = '202304'
    AND POPLTN_CNT > 0
GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM, POPLTN_SE_CD
), TMP2 AS (
	SELECT 
		ADMINIST_ZONE_NO,
		ADMINIST_ZONE_NM,
		IF(POPLTN_SE_CD = 'M', POPLTN_CNT, 0) AS MALE_POPLTN_CNT,
		IF(POPLTN_SE_CD = 'F', POPLTN_CNT, 0) AS FEMALE_POPLTN_CNT
	FROM TMP
), TMP3 AS (
	SELECT 
		ADMINIST_ZONE_NO, ADMINIST_ZONE_NM,
		MAX(MALE_POPLTN_CNT) AS MALE_POPLTN_CNT,
		MAX(FEMALE_POPLTN_CNT) AS FEMALE_POPLTN_CNT
	FROM TMP2
	GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM
), TMP4 AS (
SELECT ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    MALE_POPLTN_CNT / (MALE_POPLTN_CNT + FEMALE_POPLTN_CNT) AS MALE_PROPORTION,
    FEMALE_POPLTN_CNT / (MALE_POPLTN_CNT + FEMALE_POPLTN_CNT) AS FEMALE_PROPORTION
FROM TMP3
)
SELECT 
	ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    MALE_PROPORTION,
    FEMALE_PROPORTION
FROM TMP4
WHERE MALE_PROPORTION = (
		SELECT 
			MAX(MALE_PROPORTION)
		FROM TMP4)
	OR FEMALE_PROPORTION = (
		SELECT 
			MAX(FEMALE_PROPORTION)
		FROM TMP4) ;


-- 전국의 각 읍면동 기준, 남성 비율 및 여성 비율이 가장 높거나 낮은 지역 구하기.

-- 혼자서 다시 만들어보기
WITH TMP1 AS (SELECT 
	ADMINIST_ZONE_NO,
    ADMINIST_ZONE_NM,
	POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS POPLTN_CNT
FROM TB_POPLTN
WHERE ADMINIST_ZONE_NO NOT LIKE '_____00000'
	AND POPLTN_SE_CD IN ('M', 'F')
GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM,
	POPLTN_SE_CD
), TMP2 AS (
SELECT 
	ADMINIST_ZONE_NO, ADMINIST_ZONE_NM,
    IF(POPLTN_SE_CD = 'M',POPLTN_CNT,0) AS MALE_CNT,
    IF(POPLTN_SE_CD != 'M',POPLTN_CNT,0) AS FEMALE_CNT
FROM TMP1
), TMP3 AS(
SELECT 
	ADMINIST_ZONE_NO, ADMINIST_ZONE_NM,
	MAX(MALE_CNT) AS MALE_CNT, MAX(FEMALE_CNT) AS FEMALE_CNT 
FROM TMP2
GROUP BY ADMINIST_ZONE_NO, ADMINIST_ZONE_NM
), TMP4 AS (
SELECT
	ADMINIST_ZONE_NO, ADMINIST_ZONE_NM, MALE_CNT / FEMALE_CNT AS MALE_FEMALE_PROPORTION
FROM TMP3
)
SELECT
	ADMINIST_ZONE_NO, ADMINIST_ZONE_NM, MALE_FEMALE_PROPORTION
FROM TMP4
WHERE MALE_FEMALE_PROPORTION = 
(SELECT MAX(MALE_FEMALE_PROPORTION)
FROM TMP4)
	OR MALE_FEMALE_PROPORTION = 
(SELECT MIN(MALE_FEMALE_PROPORTION)
FROM TMP4);


-- 처음부터 다시 만들어보기

SELECT *
FROM TB_POPLTN;

WITH TMP1 AS (SELECT 
	ADMINIST_ZONE_NM,
    POPLTN_SE_CD,
    SUM(POPLTN_CNT) AS POPLTN_CNT
FROM TB_POPLTN
WHERE POPLTN_SE_CD != 'T'
	AND POPLTN_CNT > 0
	AND ADMINIST_ZONE_NO NOT LIKE "_____00000"
GROUP BY ADMINIST_ZONE_NM, POPLTN_SE_CD
), TMP2 AS(
SELECT 
	ADMINIST_ZONE_NM,
    POPLTN_SE_CD,
    POPLTN_CNT,
    SUM(POPLTN_CNT) OVER(PARTITION BY ADMINIST_ZONE_NM ) AS TOTAL_CNT
FROM TMP1
), TMP3 AS (
SELECT 
	ADMINIST_ZONE_NM,
    POPLTN_SE_CD,
    IF(POPLTN_SE_CD != "F" ,POPLTN_CNT * 100/TOTAL_CNT,0) AS MALE_PROPORTION,
    IF(POPLTN_SE_CD = "F" ,POPLTN_CNT * 100/TOTAL_CNT,0) AS FEMALE_PROPORTION
FROM TMP2
), TMP4 AS(
SELECT 
	ADMINIST_ZONE_NM,
    MAX(MALE_PROPORTION) AS MALE_PRO,
    MAX(FEMALE_PROPORTION) AS FEMALE_PRO
FROM TMP3
GROUP BY ADMINIST_ZONE_NM
)
SELECT
	ADMINIST_ZONE_NM,
    CONCAT(ROUND(MALE_PRO,2),"%") AS MALE_PRO , CONCAT(ROUND(FEMALE_PRO,2), "%") AS FEMALE_PRO,
    IF (MALE_PRO > FEMALE_PRO, "남성비율이 가장 큰 지역", "여성비율이 가장 큰 지역") AS NOTE
FROM TMP4
WHERE MALE_PRO = 
	(SELECT MAX(MALE_PRO)
	FROM TMP4)
	OR FEMALE_PRO = 
    (SELECT MAX(FEMALE_PRO)
    FROM TMP4);

-- 강사님 방법
-- RANK() OVER (ORDER BY XXX XX ) AS XXX,
-- WHERE XXX = 1 

WITH TMP1 AS (SELECT 
	ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    POPLTN_SE_CD,
    IF(POPLTN_SE_CD != 'F',SUM(POPLTN_CNT),0) AS MALE_CNT,
    IF(POPLTN_SE_CD = 'F',SUM(POPLTN_CNT),0) AS FEMALE_CNT
FROM TB_POPLTN
WHERE POPLTN_SE_CD != "T"
	AND ADMINIST_ZONE_NO NOT LIKE "_____00000"
GROUP BY ADMINIST_ZONE_NO,ADMINIST_ZONE_NM, POPLTN_SE_CD
), TMP2 AS(
SELECT
	ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    MAX(MALE_CNT) MALE_CNT,
    MAX(FEMALE_CNT) FEMALE_CNT
FROM TMP1
GROUP BY ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM
)
SELECT
	ADMINIST_ZONE_NO,
	ADMINIST_ZONE_NM,
    MALE_CNT,
    FEMALE_CNT,
    CONCAT(ROUND(MALE_CNT * 100 / FEMALE_CNT , 2) , "%") AS PROPORTION
FROM TMP2
WHERE MALE_CNT / FEMALE_CNT =
	(SELECT
		MAX(MALE_CNT / FEMALE_CNT)
	FROM TMP2)
    OR MALE_CNT / FEMALE_CNT =
	(SELECT
		MIN(MALE_CNT / FEMALE_CNT)
	FROM TMP2);
    
